define(
  //-------------------------------------------------------------------
  // DEPENDENCIES
  //-------------------------------------------------------------------
  ['jquery', 'knockout', 'notifier', 'ccPasswordValidator', 'viewModels/selfRegistrationViewModel', 'viewModels/address','pubsub', 'CCi18n',
    'ccConstants', 'navigation', 'ccLogger', 'storageApi', 'ccRestClient'
  ],

  //-------------------------------------------------------------------
  // MODULE DEFINITION
  //-------------------------------------------------------------------
  function ($, ko, notifier, CCPasswordValidator,selfRegistration,Address, pubsub, CCi18n, CCConstants, navigation, ccLogger, storageApi, ccRestClient) {
    "use strict";
    var getWidget = "";

    return {
      
      modalMessageType:   ko.observable(''),
      modalMessageText:   ko.observable(''),
      showErrorMessage:   ko.observable(false),
      userCreated:        ko.observable(false),
      ignoreBlur:         ko.observable(false),
      //selfRegistrationRequest: ko.observable(),
      radioSelectedOptionValue: ko.observable(),

      beforeAppear: function(page) {
          console.log("Page :",page);
      },
      onLoad: function(widget) {
        var self = this;
        getWidget = widget;
        if(navigation.getPath() === 'checkout' && !widget.user().loggedIn()) {
           navigation.goTo('/login');
        }
        else if(navigation.getPath() === 'login')
        {
            self.hideAllSections();
            $('#CC-loginUserPane').show();
            
        }else if(navigation.getPath() === 'registration')
        {
            self.hideAllRegisterSections();
            $('#CC-registerUserType').show();
        }
       
        self.Individual = ko.computed(
            {
                read: function() {
                    return self.radioSelectedOptionValue() == "Individual";
                },
                write: function(value){
                    if (value)
                        self.radioSelectedOptionValue("Individual");
                }
            }
        ,self);
        self.Business = ko.computed(
            {
                read: function() {
                    return self.radioSelectedOptionValue() == "Business";
                },
                write: function(value){
                    if (value)
                        self.radioSelectedOptionValue("Business");
                }
            }
        ,self); 
        self.Distributor = ko.computed(
            {
                read: function() {
                    return self.radioSelectedOptionValue() == "Distributor";
                },
                write: function(value){
                    if (value)
                        self.radioSelectedOptionValue("Distributor");
                }
            }
        ,self); 
        widget.user().ignoreEmailValidation(false);
        // To display success notification after redirection from customerProfile page.
        if(widget.user().delaySuccessNotification()) {
          notifier.sendSuccess(widget.WIDGET_ID, widget.translate('updateSuccessMsg'), true);
          widget.user().delaySuccessNotification(false);
        }

        // Handle widget responses when registration is successful or invalid
        $.Topic(pubsub.topicNames.USER_AUTO_LOGIN_SUCCESSFUL).subscribe(function(obj) {
          if(obj.widgetId === widget.WIDGET_ID) {
            self.userCreated(true);
            self.hideLoginModal();
            self.showErrorMessage(false);
            // Check if page refresh after auto login is completed, before displaying the notifier
            $.when(widget.user().autoLoginComplete).then(function() {
              notifier.clearSuccess(widget.WIDGET_ID);
              notifier.sendSuccess(widget.WIDGET_ID, widget.translate('createAccountSuccess') );
              $(window).scrollTop('0');
              widget.user().autoLoginComplete = $.Deferred();
            });
          }
        });

        $.Topic(pubsub.topicNames.USER_RESET_PASSWORD_SUCCESS).subscribe(function(data) {
          self.hideAllSections();
          self.hideLoginModal();
          //notifier.sendSuccess(widget.WIDGET_ID, CCi18n.t('ns.common:resources.resetPasswordMessage'), true);
          $('#CC-forgotPasswordMessagePane').show();
        });

        $.Topic(pubsub.topicNames.USER_RESET_PASSWORD_FAILURE).subscribe(function(data) {
          notifier.sendError(widget.WIDGET_ID, data.message, true);
        });

        $.Topic(pubsub.topicNames.USER_PASSWORD_GENERATED).subscribe(function(data) {
          $('#alert-modal-change').text(CCi18n.t('ns.common:resources.resetPasswordModalOpenedText'));
          widget.user().ignoreEmailValidation(false);
          self.hideAllSections();
          $('#CC-forgotPasswordSectionPane').show();
          $('#CC-forgotPwd-input').focus();
          widget.user().emailAddressForForgottenPwd('');
          widget.user().emailAddressForForgottenPwd.isModified(false);
        });

        $.Topic(pubsub.topicNames.USER_PASSWORD_EXPIRED).subscribe(function(data) {
          $('#alert-modal-change').text(CCi18n.t('ns.common:resources.resetPasswordModalOpenedText'));
          widget.user().ignoreEmailValidation(false);
          self.hideAllSections();
          $('#CC-forgotPasswordSectionPane').show();
          $('#CC-forgotPwd-input').focus();
          widget.user().emailAddressForForgottenPwd('');
          widget.user().emailAddressForForgottenPwd.isModified(false);
        });


        $.Topic(pubsub.topicNames.USER_CREATION_FAILURE).subscribe(function(obj) {
          if(obj.widgetId === widget.WIDGET_ID) {
            widget.user().resetPassword();
            self.modalMessageType("error");
            self.modalMessageText(obj.message);
            self.showErrorMessage(true);
          };
        });

        $.Topic(pubsub.topicNames.USER_LOGIN_FAILURE).subscribe(function(obj) {
          self.modalMessageType("error");

          if (obj.errorCode && obj.errorCode === CCConstants.ACCOUNT_ACCESS_ERROR_CODE) {
            self.modalMessageText(CCi18n.t('ns.common:resources.accountError'));
          }
          else {
            //self.modalMessageText(CCi18n.t('ns.common:resources.loginError'));
            self.modalMessageText('Invalid credentials');
          }

          self.showErrorMessage(true);
        });

        $.Topic(pubsub.topicNames.USER_LOGIN_SUCCESSFUL).subscribe(function(obj) {
          self.hideLoginModal();
          self.showErrorMessage(false);
          notifier.clearSuccess(widget.WIDGET_ID);
          $('#CC-loginHeader-myAccount').focus();
          $('#CC-loginHeader-myAccount-mobile').focus();
        });

        // Replacing pubsub subscription with this. PubSub's getting called multiple times, causing this method to be called multiple times,
        // causing login modal to appear and disappears at times.
        navigation.setLoginHandler(function(data) {

          // Do a subscription to page ready.
          $.Topic(pubsub.topicNames.PAGE_READY).subscribe(function(pageEvent) {
            if (pageEvent) {
              // Check if the pageId is undefined. If so, set it to empty string.
              if (pageEvent.pageId == undefined) {
                pageEvent.pageId = "";
              }
              var loginHandlerPageParts = [];
              if (navigation.loginHandlerPage) {
                loginHandlerPageParts = navigation.loginHandlerPage.split('/');
              } else if (navigation.loginHandlerPage == "") {
                loginHandlerPageParts = [""];
              }
              if ((navigation.loginHandlerPage == undefined) || (navigation.loginHandlerPage == null) || (navigation.loginHandlerPage !== "" && pageEvent.path !== undefined && pageEvent.path !== null && navigation.loginHandlerPage.indexOf(pageEvent.path) == -1)) {
                return;
              }
            }
            if (data && data[0] && data[0].linkToRedirect) {
              widget.user().pageToRedirect(data[0].linkToRedirect);
              if (widget.user().loggedInUserName()!='' && !widget.user().isUserSessionExpired()) {
                widget.user().handleSessionExpired();
              }
            }

            setTimeout(function(){
              $('#CC-headermodalpane').modal('show');
              self.hideAllSections();
              self.userCreated(false);
              $('#CC-loginUserPane').show();
              $('#CC-headermodalpane').on('shown.bs.modal', function () {
                if (!widget.user().loggedIn() && !widget.user().isUserLoggedOut() && widget.user().login()
                    && widget.user().login() != '' && widget.user().isUserSessionExpired()) {
                  widget.user().populateUserFromLocalData(true);
                  $('#CC-login-password-input').focus();
                  widget.user().password.isModified(false);
                } else {
                  $('#CC-login-input').focus();
                  widget.user().login.isModified(false);
                }
                // Set the login handler page to null now
                navigation.loginHandlerPage = null;
              });

              $('#CC-headermodalpane').on('hidden.bs.modal', function () {
                if (!(self.userCreated() || widget.user().loggedIn()) &&
                   (($('#CC-loginUserPane').css('display') == 'block') ||
                   ($('#CC-registerUserPane').css('display') == 'block') ||
                   ($('#CC-updatePasswordPane').css('display') == 'block') ||
                   ($('#CC-forgotPasswordSectionPane').css('display') == 'block') ||
                   ($('#CC-forgotPasswordMessagePane').css('display') == 'block') ||
                   ($('#CC-updatePasswordErrorMessagePane').css('display') == 'block')) ) {
                     self.cancelLoginModal(widget);
                }
              });
            }, CCConstants.PROFILE_UNAUTHORIZED_DEFAULT_TIMEOUT);
          });
        });

        // This pubsub checks for the page parameters and if there is a token
        // in the page URL, validates it and then starts the update expired/
        // forgotten password modal.
        $.Topic(pubsub.topicNames.PAGE_PARAMETERS).subscribe(function() {
          var token = this.parameters.occsAuthToken;
          // Proceed only if there is a token on the parameters
          if (token) {
           // Validate the token to make sure that it is valid
           // before proceeding to update the password.
           widget.user().validateTokenForPasswordUpdate(token,
             // Success callback
             function(data){
               // Let's try and update the password.
               $('#CC-headermodalpane').modal('show');
               self.hideAllSections();
               $('#CC-updatePasswordPane').show();
               $('#CC-headermodalpane').on('shown.bs.modal', function () {
                 $('#CC-updatePassword-email').focus();
               });
             },
             // Error callback
             function(data) {
               // Error function - show error message
               $('#CC-headermodalpane').modal('show');
               self.hideAllSections();
               $('#CC-updatePasswordErrorMessagePane').show();
           });
          }
        });
        self.selfRegistrationRequest = new selfRegistration();
        $(document).on('hide.bs.modal','#CC-headermodalpane', function () {
          if ($('#CC-loginUserPane').css('display') == 'block') {
            $('#alert-modal-change').text(CCi18n.t('ns.common:resources.loginModalClosedText'));
          }
          else if ($('#CC-registerUserPane').css('display') == 'block') {
            $('#alert-modal-change').text(CCi18n.t('ns.common:resources.registrationModalClosedText'));
          }
          else if ($('#CC-forgotPasswordSectionPane').css('display') == 'block') {
            $('#alert-modal-change').text(CCi18n.t('ns.common:resources.resetPasswordModalClosedText'));
          }
          else if ($('#CC-updatePasswordPane').css('display') == 'block') {
            $('#alert-modal-change').text(CCi18n.t('ns.common:resources.updatePasswordModalClosedText'));
          }
        });
        $(document).on('show.bs.modal','#CC-headermodalpane', function () {
          if ($('#CC-loginUserPane').css('display') == 'block') {
            $('#alert-modal-change').text(CCi18n.t('ns.common:resources.loginModalOpenedText'));
          }
          else if ($('#CC-registerUserPane').css('display') == 'block') {
            $('#alert-modal-change').text(CCi18n.t('ns.common:resources.registrationModalOpenedText'));
          }
          else if ($('#CC-forgotPasswordSectionPane').css('display') == 'block') {
            $('#alert-modal-change').text(CCi18n.t('ns.common:resources.resetPasswordModalOpenedText'));
          }
          else if ($('#CC-updatePasswordPane').css('display') == 'block') {
            $('#alert-modal-change').text(CCi18n.t('ns.common:resources.updatePasswordModalOpenedText'));
          }
        });

        // Added handlers to catch the ESC button when the password related models are open and closed with ESC.
        $(document).on('hidden.bs.modal','#CC-headermodalpane', function () {
          if (!(self.userCreated() || widget.user().loggedIn()) &&
           ($('#CC-updatePasswordMessagePane').css('display') == 'block') ||
           ($('#CC-updatePasswordPane').css('display') == 'block') ||
           ($('#CC-forgotPasswordSectionPane').css('display') == 'block') ||
           ($('#CC-forgotPasswordMessagePane').css('display') == 'block') ||
           ($('#CC-updatePasswordErrorMessagePane').css('display') == 'block')){
             self.cancelLoginModal(widget)
            }
        });
      },

      removeMessageFromPanel: function() {
        var message = this;
        var messageId = message.id();
        var messageType = message.type();
        notifier.deleteMessage(messageId, messageType);
      },

      emailAddressFocused : function(data) {
        if(this.ignoreBlur && this.ignoreBlur()) {
          return true;
        }
        this.user().ignoreEmailValidation(true);
        return true;
      },

      emailAddressLostFocus : function(data) {
        if(this.ignoreBlur && this.ignoreBlur()) {
          return true;
        }
        this.user().ignoreEmailValidation(false);
        return true;
      },

      passwordFieldFocused : function(data) {
        if(this.ignoreBlur && this.ignoreBlur()) {
          return true;
        }
        this.user().ignorePasswordValidation(true);
        return true;
      },

      passwordFieldLostFocus : function(data) {
        if(this.ignoreBlur && this.ignoreBlur()) {
          return true;
        }
        this.user().ignorePasswordValidation(false);
        return true;
      },

      confirmPwdFieldFocused : function(data) {
        if(this.ignoreBlur && this.ignoreBlur()) {
          return true;
        }
        this.user().ignoreConfirmPasswordValidation(true);
        return true;
      },

      confirmPwdFieldLostFocus : function(data) {
        if(this.ignoreBlur && this.ignoreBlur()) {
          return true;
        }
        this.user().ignoreConfirmPasswordValidation(false);
        return true;
      },

      handleLabelsInIEModals: function() {
        if(!!(navigator.userAgent.match(/Trident/)) ) {
          $("#CC-LoginRegistrationModal label").removeClass("inline");
        }
      },

      /**
       * Registration will be called when register is clicked
       */
      registerUser: function(data, event) {
        if ('click' === event.type || (('keydown' === event.type || 'keypress' === event.type) && event.keyCode === 13)) {
          notifier.clearError(this.WIDGET_ID);
          //removing the shipping address if anything is set
          data.user().shippingAddressBook([]);
          data.user().updateLocalData(false, false);
          if (data.user().validateUser()) {
            $.Topic(pubsub.topicNames.USER_REGISTRATION_SUBMIT).publishWith(data.user(), [{message: "success", widgetId: data.WIDGET_ID}]);
          }
        }
        return true;
      },

      /**
       * this method is invoked to hide the login modal
       */
      hideLoginModal: function() {
        $('#CC-headermodalpane').modal('hide');
        $('body').removeClass('modal-open');
        $('.modal-backdrop').remove();
      },

      /**
       * Invoked when Login method is called
       */
       handleLogin: function(data, event) {
        if('click' === event.type || (('keydown' === event.type || 'keypress' === event.type) && event.keyCode === 13)) {
          notifier.clearError(this.WIDGET_ID);
          if (data.user().validateLogin()) {
            data.user().updateLocalData(false, false);
            $.Topic(pubsub.topicNames.USER_LOGIN_SUBMIT).publishWith(data.user(), [{message: "success"}]);
          }
        }
        return true;
      },

      /**
       * Invoked when cancel button is clicked on login modal
       */
       handleCancel: function(data, event) {
        if('click' === event.type || (('keydown' === event.type || 'keypress' === event.type) && event.keyCode === 13)) {
          notifier.clearError(this.WIDGET_ID);
          if (data.user().isUserSessionExpired()) {
            $.Topic(pubsub.topicNames.USER_LOGOUT_SUBMIT).publishWith([{message: "success"}]);
            this.hideLoginModal();
          }
        }
        return true;
      },
      /**
       * this method is triggered when the user clicks on the save
       * on the update password model
       */
      savePassword: function(data, event) {

        if('click' === event.type || (('keydown' === event.type || 'keypress' === event.type) && event.keyCode === 13)) {
          notifier.clearError(this.WIDGET_ID);
          data.user().ignoreConfirmPasswordValidation(false);
          data.user().ignoreEmailValidation(false);
          data.user().emailAddressForForgottenPwd.isModified(true);
          if (data.user().isPasswordValid(true) &&
              data.user().emailAddressForForgottenPwd  &&
              data.user().emailAddressForForgottenPwd.isValid()) {
            data.user().updateExpiredPasswordUsingToken(data.user().token,
              data.user().emailAddressForForgottenPwd(), data.user().newPassword(),
              data.user().confirmPassword(),
              function(retData) {
                // Success function
                data.hideAllSections();
                 navigation.goTo('/login') 
                //$('#CC-updatePasswordMessagePane').show();
               // $('#CC-updatePasswordMsgContinue').focus();
              },
              function(retData) {
                // Error function - show error message
                data.hideAllSections();
                $('#CC-updatePasswordErrorMessagePane').show();
              }
            );
          }
        }
        return true;
      },

      /**
       * Invoked when cancel button is called on
       */
      cancelLoginModal: function(widget) {
        if (widget.hasOwnProperty("user")) {
          widget.user().handleCancel();
          if (widget.user().pageToRedirect() && widget.user().pageToRedirect() == widget.links().checkout.route && widget.cart().items().length > 0) {
            var hash = widget.user().pageToRedirect();
            widget.user().pageToRedirect(null);
            navigation.goTo(hash);
          } else {
            navigation.cancelLogin();
          }
          widget.user().pageToRedirect(null);
          notifier.clearError(widget.WIDGET_ID);
          widget.user().clearUserData();
          widget.user().profileRedirect();
        }
        else {
          navigation.cancelLogin();
        }
      },

      /**
       * Invoked when Logout method is called
       */
      handleLogout: function(data) {
        // returns if the profile has unsaved changes.
        if (data.isUserProfileEdited()) {
          return true;
        }
        // Clearing the auto-login success message
        notifier.clearSuccess(this.WIDGET_ID);
        // Clearing any other notifications
        notifier.clearError(this.WIDGET_ID);
        data.updateLocalData(data.loggedinAtCheckout(), false);
        $.Topic(pubsub.topicNames.USER_LOGOUT_SUBMIT).publishWith([{message: "success"}]);
      },

      /**
       * Invoked when the modal dialog for registration is closed
       */
      cancelRegistration: function(data) {
        notifier.clearSuccess(this.WIDGET_ID);
        notifier.clearError(this.WIDGET_ID);
        this.hideLoginModal();
        data.user().reset();
        this.showErrorMessage(false);
        data.user().pageToRedirect(null);
      },

      /**
       * Invoked when registration link is clicked
       */
      clickRegistration: function(data) {
        notifier.clearSuccess(this.WIDGET_ID);
        notifier.clearError(this.WIDGET_ID);
        data.reset();
        this.hideAllSections();
        $('#CC-registerUserPane').show();
        this.showErrorMessage(false);
        $('#CC-headermodalpane').on('shown.bs.modal', function () {
            $('#CC-userRegistration-firstname').focus();
            data.firstName.isModified(false);
        });
      },

      /**
       * Invoked when login link is clicked
       */
      clickLogin: function(data) {
        notifier.clearSuccess(this.WIDGET_ID);
        notifier.clearError(this.WIDGET_ID);
        data.reset();
        this.hideAllSections();
        $('#CC-loginUserPane').show();
        this.showErrorMessage(false);
        $('#CC-headermodalpane').on('shown.bs.modal', function () {
          if (!data.loggedIn() && data.login() && data.login() != '' && data.isUserSessionExpired()) {
            data.populateUserFromLocalData(true);
            $('#CC-login-password-input').focus();
            data.password.isModified(false);
          } else {
            $('#CC-login-input').focus();
            data.login.isModified(false);
          }
          // Set the login handler page to null now
          navigation.loginHandlerPage = null;
        });
      },

      /**
       * Ignores the blur function when mouse click is up
       */
      handleMouseUp: function(data) {
        data.ignoreBlur(false);
        data.user().ignoreConfirmPasswordValidation(false);
        return true;
      },

      /**
       * Ignores the blur function when mouse click is down
       */
      handleMouseDown: function(data) {
        data.ignoreBlur(true);
        data.user().ignoreConfirmPasswordValidation(true);
        return true;
      },

      /**
       * Ignores the blur function when mouse click is down outside the modal dialog(backdrop click).
       */
      handleModalDownClick: function(data, event) {
        if (event.target === event.currentTarget) {
          this.ignoreBlur(true);
          this.user().ignoreConfirmPasswordValidation(true);
        }
        return true;
      },

     /**
      * Invoked when register is clicked on login modal
      */
      showRegistrationSection: function(data) {
        $('#alert-modal-change').text(CCi18n.t('ns.common:resources.registrationModalOpenedText'));
        this.hideAllSections();
        $('#CC-registerUserPane').show();
        $('#CC-userRegistration-firstname').focus();
        data.user().firstName.isModified(false);
        notifier.clearError(this.WIDGET_ID);
        notifier.clearSuccess(this.WIDGET_ID);
        data.user().reset();
        this.showErrorMessage(false);
      },

      /**
       * Invoked when forgotten Password link is clicked.
       */
      showForgotPasswordSection: function(data) {
        $('#alert-modal-change').text(CCi18n.t('ns.common:resources.forgottenPasswordModalOpenedText'));
        this.user().ignoreEmailValidation(false);
        this.hideAllSections();
        $('#CC-forgotPasswordSectionPane').show();
        $('#CC-forgotPwd-input').focus();
        this.user().emailAddressForForgottenPwd('');
        this.user().emailAddressForForgottenPwd.isModified(false);
      },

      /**
       * Hides all the sections of  modal dialogs.
       */
      hideAllSections: function() {
        $('#CC-loginUserPane').hide();
        $('#CC-registerUserPane').hide();
        $('#CC-forgotPasswordSectionPane').hide();
        $('#CC-updatePasswordPane').hide();
        $('#CC-updatePasswordMessagePane').hide();
        $('#CC-forgotPasswordMessagePane').hide();
        $('#CC-updatePasswordErrorMessagePane').hide();
      },

     /**
       * Hides all the sections of  modal dialogs.
       */
      hideAllRegisterSections: function() {
        $('#CC-registerBusinessUserPane').hide();
        $('#CC-submitSelfRegistrationRequestPane').hide();
        $('#CC-submitSelfRegistrationRequestType').hide();
        $('#CC-individualUserContactInfo').hide();
      },
      showIndividualUserContactInfo: function(data, event){
          data.hideAllRegisterSections();
          $('#CC-individualUserContactInfo').show();
          return false;
      },
      /**
       * Resets the password for the entered email id.
       */
      resetForgotPassword: function(data,event) {
        if('click' === event.type || (('keydown' === event.type || 'keypress' === event.type) && event.keyCode === 13)) {
          data.user().ignoreEmailValidation(false);
          data.user().emailAddressForForgottenPwd.isModified(true);
          if(data.user().emailAddressForForgottenPwd  && data.user().emailAddressForForgottenPwd.isValid()) {
            data.user().resetForgotPassword();
          }
        }
        return true;
      },
      	createCustomer: function () {
				var self = this;
				var orderRefreshIndicatorOptions = {
					parent: '#main',
					posTop: '20em',
					posLeft: '50%'
				}
				$('#main').addClass('loadingIndicator');
				$('#main').css('position', 'relative');
				spinner.create(orderRefreshIndicatorOptions);

				var address = self.selfRegistrationRequest.organization.secondaryAddresses()[0].address;
				address.validateNow();

				if (address.city() === '' || address.postalCode() === '') {
					notifier.sendError("register", "Mandatory Fields are missing", true);
					return;
				}
				/*    if (!getWidget.validateAddress(address)) {
				        notifier.sendError("register", "Invalid Address. Please check the address and try again.", true);
				        return;
				    }*/

				if (self.password() === '' || self.password().length < 8) {
					notifier.sendError("register", "Length of password needs to minimum 8 words", true);
					$('#main').removeClass('loadingIndicator');
					spinner.destroy();
					return;
				}


				if (self.selfRegistrationRequest.profile.lastName() === '' || self.selfRegistrationRequest.profile.firstName() === '' || self.selfRegistrationRequest.profile.email() === undefined || self.selfRegistrationRequest.profile.email() === '' || address.country() === '' || address.city() === '' || address.state() === '') {
					notifier.sendError("register", "Please enter all mandatory Fields", true);
					$('#main').removeClass('loadingIndicator');
					spinner.destroy();
					return;
				}

                var defaultShippingAddress = {
						"lastName": self.selfRegistrationRequest.profile.lastName(),
						"country": address.country(),
						"address3": address.address3(),
						"address2": address.address2(),
						"city": address.city(),
						"address1": address.address1(),
						"postalCode": address.postalCode(),
						"companyName": address.companyName(),
						"isDefaultAddress": true,
						"firstName": self.selfRegistrationRequest.profile.firstName(),
						"phoneNumber": address.phoneNumber(),
						"alias": "Address",
						"state": address.state(),
						"selectedCountry": address.selectedCountry(),
						"selectedState": address.selectedState(),
						"is_default_shipping_address": true,
						"is_default_billing_address": true
					}

                console.log(defaultShippingAddress);

				var payload = {

					"receiveEmail": "yes",
					"firstName": self.selfRegistrationRequest.profile.firstName(),
					"lastName": self.selfRegistrationRequest.profile.lastName(),
					"email": self.selfRegistrationRequest.profile.email(),
					"password": self.password(),
					"default_shippingAddress_data": defaultShippingAddress,
					"default_billingAddress_data" :defaultShippingAddress
				}


				CCRestClient.request(CCConstants.ENDPOINT_CREATE_PROFILE,
					payload,
					function (success) {
						console.log("success" + success);
						$('#main').removeClass('loadingIndicator');
						spinner.destroy();
						navigation.goTo('/account_confirmation');
					}, // defined elsewhere
					function (error) {
						notifier.sendError("contact-creation", "Error while processing request", true);
						$('#main').removeClass('loadingIndicator');
						spinner.destroy();
					}, // defined elsewhere
					null);
			},
			
			submitSelfRegistrationRequest: function (data, event) {
				//var widget=this;
				var self = data;
				var type = getWidget.accountTypeValue;


				// getWidget.firstName(self.selfRegistrationRequest.profile.firstName());
				//getWidget.lastName(self.selfRegistrationRequest.profile.lastName());
				self.selfRegistrationRequest.organization.account_type = type;
				var tax = getWidget.b2b_tax_exempt;
				self.selfRegistrationRequest.organization.b2b_tax_exempt = tax;
				if ('click' === event.type || (('keydown' === event.type || 'keypress' === event.type) && event.keyCode === 13)) {
					self.selfRegistrationRequest.organization.secondaryAddresses()[0].address.companyName(self.selfRegistrationRequest.name());
					console.log(self.selfRegistrationRequest.organization.secondaryAddresses()[0].address);


					var address = self.selfRegistrationRequest.organization.secondaryAddresses()[0].address;

					address.validateNow();

					if (address.city() === '' || address.postalCode() === '') {
						notifier.sendError("register", "Mandatory Fields are missing", true);
						return;
					}
					if (!getWidget.validateAddress(address)) {
						notifier.sendError("register", "Invalid Address. Please check the address and try again.", true);
						return;
					}

					var getQueryString = function (field, url) {
						var href = url ? url : window.location.href;
						var reg = new RegExp('[?&]' + field + '=([^&#]*)', 'i');
						var string = reg.exec(href);
						return string ? string[1] : null;
					};

					console.log(getQueryString('ar_customer'));
					if (getQueryString('ar_customer') === "true") {
						self.selfRegistrationRequest.profile.ar_account_User = true;
					}
					self.selfRegistrationRequest.profile.account_type = getWidget.accountTypeValue;

					//  self.showSuccessPane(true);
					self.selfRegistrationRequest.createSelfRegistrationRequest(self.createOrganizationRequestSuccess.bind(self), self.createOrganizationRequestFailure.bind(self));
				}
				return true;
			},
      showRegistrationModal: function(){
          var self = this;
          if(self.radioSelectedOptionValue() === "Individual")
          {
               //self.selfRegistrationRequest.reset();
               self.hideAllRegisterSections();
               $('#CC-submitSelfRegistrationRequestPane').show();
          }else if(self.radioSelectedOptionValue() === "Business" || self.radioSelectedOptionValue() === "Distributor")
          {
               //self.selfRegistrationRequest.reset();
               self.hideAllRegisterSections();
               $('#CC-registerBusinessUserPane').show();
               
          }
          
      },
      addValidationsForSelfRegistration: function () {
				var self = this;
				//Adding validations for first name, last name, company name and emailAddress
				self.selfRegistrationRequest.profile.firstName.extend({
					required: {
						params: true,
						message: CCi18n.t('ns.common:resources.firstNameRequired')
					},
					maxLength: {
						params: CCConstants.REPOSITORY_STRING_MAX_LENGTH,
						message: CCi18n.t('ns.common:resources.maxlengthValidationMsg', {
							maxLength: CCConstants.REPOSITORY_STRING_MAX_LENGTH
						})
					}
				});
				self.selfRegistrationRequest.profile.lastName.extend({
					required: {
						params: true,
						message: CCi18n.t('ns.common:resources.lastNameRequired')
					},
					maxLength: {
						params: CCConstants.REPOSITORY_STRING_MAX_LENGTH,
						message: CCi18n.t('ns.common:resources.maxlengthValidationMsg', {
							maxLength: CCConstants.REPOSITORY_STRING_MAX_LENGTH
						})
					}
				});
				self.selfRegistrationRequest.name.extend({
					required: {
						params: true,
						message: CCi18n.t('ns.common:resources.companyNameRequired')
					},
					maxLength: {
						params: CCConstants.ORG_REQ_NAME_MAX_LENGTH,
						message: CCi18n.t('ns.common:resources.maxlengthValidationMsg', {
							maxLength: CCConstants.ORG_REQ_NAME_MAX_LENGTH
						})
					}
				});
				self.selfRegistrationRequest.profile.email.extend({
					required: {
						params: true,
						message: CCi18n.t('ns.common:resources.emailAddressRequired')
					},
					email: {
						params: true,
						onlyIf: function () {
							return !self.ignoreOrgRequestEmailValidation()
						},
						message: CCi18n.t('ns.common:resources.emailAddressInvalid')
					},
					maxLength: {
						params: CCConstants.EMAIL_ID_MAX_LENGTH,
						message: CCi18n.t('ns.common:resources.maxlengthValidationMsg', {
							maxLength: CCConstants.EMAIL_ID_MAX_LENGTH
						})
					}
				});
				self.selfRegistrationRequest.requesterComments.extend({
					maxLength: {
						params: 1000,
						message: CCi18n.t('ns.common:resources.requesterCommentMaxLengthText')
					}
				});
				self.selfRegistrationRequest.relatedOrganizationName.extend({
					maxLength: {
						params: CCConstants.REPOSITORY_STRING_MAX_LENGTH,
						message: CCi18n.t('ns.common:resources.maxlengthValidationMsg', {
							maxLength: CCConstants.REPOSITORY_STRING_MAX_LENGTH
						})
					}
				});
			},
      handleCustomLogout: function (data) {
        console.log(data);
        var self = data;
        $.Topic(pubsub.topicNames.USER_CLEAR_CART).publish([{
          message: "success"
        }]);

        var successFunc = function () {
          $.Topic(pubsub.topicNames.USER_LOGOUT_SUCCESSFUL).publish([{
            message: "success"
          }]);
          storageApi.getInstance().removeItem(CCConstants.LOCAL_STORAGE_SHOPPER_CONTEXT);
          storageApi.getInstance().removeItem(CCConstants.LOCAL_STORAGE_CURRENT_CONTEXT);
          ccRestClient.clearStoredValue(CCConstants.LOCAL_STORAGE_PRICELISTGROUP_ID);
          self.clearUserData();

          if (self.refreshPageAfterContactLogout()) {
            self.refreshPageAfterContactLogout(false);
          
          } else {
            //Refreshing layout to set Content Variation Slots, if any.
            var eventData = {
              'pageId': navigation.getPath()
            };
            $.Topic(pubsub.topicNames.PAGE_VIEW_CHANGED).publish(eventData);
          }

            navigation.goTo('/home')            
          

        };

        if (self.loggedIn()) {
          if (self.parentOrganization && self.parentOrganization.name()) {
            self.refreshPageAfterContactLogout(true);
          }
          self.client().logout(successFunc, errorFunc);
        } else {
          self.clearUserData();
          $.Topic(pubsub.topicNames.USER_LOGOUT_SUCCESSFUL).publish([{
            message: "success"
          }]);
          self.profileRedirect();
        }
        var errorFunc = function (pResult) {
          self.clearUserData();
          self.profileRedirect();
          window.location.assign(self.contextData.global.links.home.route);
        };
      }
    };
  }
);
